name: Frontend CD - Deploy to AKS with external IPS

on:
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: 'Product Service External IP'
        required: true
      order_api_ip:
        description: 'Order Service External IP'
        required: true
      customer_api_ip:
        description: 'Customer Service External IP'
        required: true

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production

    env:
      IMAGE_TAG: ${{ github.sha }}
      ACR_NAME: ${{ secrets.AZURE_ACR_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker Login to ACR
        run: az acr login --name $ACR_NAME

      - name: Inject Backend IPs into Frontend main.js
        run: |
          PRODUCT_IP='${{ inputs.product_api_ip }}'
          ORDER_IP='${{ inputs.order_api_ip }}'
          CUSTOMER_IP='${{ inputs.customer_api_ip }}'

          sed -i "s|_PRODUCT_API_URL_|$PRODUCT_IP|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|$ORDER_IP|g" frontend/main.js
          sed -i "s|_CUSTOMER_API_URL_|$CUSTOMER_IP|g" frontend/main.js

          cat frontend/main.js

      - name: Build & Push Frontend Image
        run: |
          docker build -t ${{ secrets.AZURE_CONTAINER_REGISTRY }}/frontend:latest ./frontend/
          docker push ${{ secrets.AZURE_CONTAINER_REGISTRY }}/frontend:latest

      - name: Set Kubernetes context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Deploy Frontend
        run: kubectl apply -f k8s/frontend.yaml

      - name: Logout from Azure
        if: always()
        run: az logout
