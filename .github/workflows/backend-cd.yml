name: Backend CD - Deploy to AKS (Production)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    env:
      ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }} \
            --overwrite-existing

      - name: Create ACR secret (if not exists)
        run: |
          kubectl get secret acr-secret || \
          kubectl create secret docker-registry acr-secret \
            --docker-server=${{ secrets.AZURE_CONTAINER_REGISTRY }} \
            --docker-username=${{ secrets.AZURE_ACR_NAME }} \
            --docker-password=${{ secrets.AZURE_ACR_KEY }} \
            --docker-email=weeramann@gmail.com
          kubectl get secret acr-secret

      - name: Apply Kubernetes manifests
        run: kubectl apply -f k8s/

      - name: Update product deployment image and rollout
        run: |
          PRODUCT_DEP=product-service-w10
          PROD_CONT=$(kubectl get deployment $PRODUCT_DEP -o jsonpath='{.spec.template.spec.containers[0].name}')
          kubectl set image deployment/$PRODUCT_DEP $PROD_CONT=${{ env.ACR_LOGIN_SERVER }}/product_service:latest
          kubectl rollout status deployment/$PRODUCT_DEP --timeout=180s

      - name: Update order deployment image and rollout
        run: |
          ORDER_DEP=order-service-w10
          ORDER_CONT=$(kubectl get deployment $ORDER_DEP -o jsonpath='{.spec.template.spec.containers[0].name}')
          kubectl set image deployment/$ORDER_DEP $ORDER_CONT=${{ env.ACR_LOGIN_SERVER }}/order_service:latest
          kubectl rollout status deployment/$ORDER_DEP --timeout=180s

      - name: Update customer deployment image and rollout
        run: |
          CUST_DEP=customer-service-w10
          CUST_CONT=$(kubectl get deployment $CUST_DEP -o jsonpath='{.spec.template.spec.containers[0].name}')
          kubectl set image deployment/$CUST_DEP $CUST_CONT=${{ env.ACR_LOGIN_SERVER }}/customer_service:latest
          kubectl rollout status deployment/$CUST_DEP --timeout=180s

      - name: Update frontend deployment image and rollout
        run: |
          FRONTEND_DEP=frontend
          FRONTEND_CONT=$(kubectl get deployment $FRONTEND_DEP -o jsonpath='{.spec.template.spec.containers[0].name}')
          kubectl set image deployment/$FRONTEND_DEP $FRONTEND_CONT=${{ env.ACR_LOGIN_SERVER }}/frontend:latest
          kubectl rollout status deployment/$FRONTEND_DEP --timeout=180s

      - name: Get external IPs of services
        run: kubectl get svc

      - name: Logout from Azure
        if: always()
        run: az logout
