#Trigger
name: Backend CI - Test, Build and Push Images to ACR

on:
  push:
    branches:
      - testing
  pull_request:
    branches:
      - testing
  workflow_dispatch:

env:
  # This secret may be either the registry login server (nwweek10acr.azurecr.io)
  # or the ACR name (nwweek10acr). The workflow will normalize it.
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test_and_lint_backends:
    runs-on: ubuntu-latest
    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      customer_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: customers
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5434:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest httpx
          for req in backend/*/requirements.txt; do
            if [ -f "$req" ]; then pip install -r "$req"; fi
          done

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run customer_service tests
        working-directory: backend/customer_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5434
          POSTGRES_DB: customers
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

  build_and_push_images:
    name: Build & Push images to ACR
    runs-on: ubuntu-latest
    needs: test_and_lint_backends
    if: needs.test_and_lint_backends.result == 'success'
    env:
      ACR_LOGIN_SERVER_INPUT: ${{ secrets.AZURE_CONTAINER_REGISTRY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker Login to ACR
        run: az acr login --name ${{ env.ACR_LOGIN_SERVER }}

      - name: Build & Push Product Service
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }} ./backend/product_service/
          docker tag ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }} ${{ env.ACR_LOGIN_SERVER }}/product_service:latest
          docker push ${{ env.ACR_LOGIN_SERVER }}/product_service --all-tags

      - name: Build & Push Order Service
        run: |
              docker build -t ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }} ./backend/order_service/
              docker tag ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }} ${{ env.ACR_LOGIN_SERVER }}/order_service:latest
              docker push ${{ env.ACR_LOGIN_SERVER }}/order_service --all-tags


      - name: Build & Push Customer Service
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ env.IMAGE_TAG }} ./backend/customer_service/
          docker tag ${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ env.IMAGE_TAG }} ${{ env.ACR_LOGIN_SERVER }}/customer_service:latest
          docker push ${{ env.ACR_LOGIN_SERVER }}/customer_service --all-tags


      - name: Logout from Azure
        run: az logout
        if: always()