name: Backend CD - Deploy to AKS (Staging)

on:
  workflow_run:
    workflows: ["Backend CI - Test, Build and Push Images to ACR"]

    types: [completed]

  push:
    branches:
      - main
      - testing

  workflow_dispatch:

jobs:
  deploy_backend_staging:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    env:
      ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
      IMAGE_TAG: ${{ github.event.workflow_run.head_sha }}
      STAGING_NS: staging-${{ github.run_id }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }} \
            --overwrite-existing

      - name: Create ephemeral namespace
        run: |
          kubectl create ns $STAGING_NS --dry-run=client -o yaml | kubectl apply -f -

      - name: Create ACR secret in namespace 
        run: |
          ACR_PASSWORD=$(az acr credential show --name ${{ secrets.AZURE_ACR_NAME }} --query "passwords[0].value" -o tsv)
          kubectl -n $STAGING_NS create secret docker-registry acr-secret \
            --docker-server=${{ secrets.AZURE_CONTAINER_REGISTRY }} \
            --docker-username=${{ secrets.AZURE_ACR_NAME }} \
            --docker-password=$ACR_PASSWORD \
            --docker-email=weeramann@gmail.com || true
            

      - name: Apply k8s manifests into ephemeral namespace
        run: kubectl -n $STAGING_NS apply -f k8s/

      - name: Update product deployment image and rollout
        run: |
          PRODUCT_DEP=product-service-w10
          PROD_CONT=$(kubectl -n $STAGING_NS get deployment $PRODUCT_DEP -o jsonpath='{.spec.template.spec.containers[0].name}')
          kubectl -n $STAGING_NS set image deployment/$PRODUCT_DEP $PROD_CONT=${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}
          kubectl -n $STAGING_NS rollout status deployment/$PRODUCT_DEP --timeout=180s

      - name: Update order deployment image and rollout
        run: |
          ORDER_DEP=order-service-w10
          ORDER_CONT=$(kubectl -n $STAGING_NS get deployment $ORDER_DEP -o jsonpath='{.spec.template.spec.containers[0].name}')
          kubectl -n $STAGING_NS set image deployment/$ORDER_DEP $ORDER_CONT=${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}
          kubectl -n $STAGING_NS rollout status deployment/$ORDER_DEP --timeout=180s

      - name: Update customer deployment image and rollout
        run: |
          CUST_DEP=customer-service-w10
          CUST_CONT=$(kubectl -n $STAGING_NS get deployment $CUST_DEP -o jsonpath='{.spec.template.spec.containers[0].name}')
          kubectl -n $STAGING_NS set image deployment/$CUST_DEP $CUST_CONT=${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ env.IMAGE_TAG }}
          kubectl -n $STAGING_NS rollout status deployment/$CUST_DEP --timeout=180s

      - name: Simple acceptance tests (smoke)
        run: |
          kubectl -n $STAGING_NS run --rm -i --restart=Never smoke-curl --image=curlimages/curl -- /bin/sh -c "curl -sSf http://product-service-w10:80/health && curl -sSf http://order-service-w10:80/health && curl -sSf http://customer-service-w10:80/health"
        timeout-minutes: 5

      - name: Destroy ephemeral namespace
        if: always()
        run: kubectl delete ns $STAGING_NS --wait=false || true

      - name: Logout from Azure
        if: always()
        run: az logout
